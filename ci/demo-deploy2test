#!groovy
node {   
// '##################Creditial SETUP########################'
def GIT_URL = 'git@github.com:bmw-poc/pipeline.git'
def GIT_CRED = 'gitcom-user-bchen'

def SONAR_URL = 'http://ralbz001031.cloud.dst.ibm.com:19000/'
String DOCKER_REPO="registry.cn-beijing.aliyuncs.com/bmwpoc"

def PRODUCT_NAME="demo"
def BUILT_IMAGE_SUFFIX="-dev"
def DEPLOY_ENV_SUFFIX="-dev"

String BUILT_IMAGE_NAME = "${PRODUCT_NAME}${BUILT_IMAGE_SUFFIX}"
String BUILT_IMAGE_TAG = "build" + env.BUILD_NUMBER 

String CONTAINER_NAME="${PRODUCT_NAME}${DEPLOY_ENV_SUFFIX}"
String DEPLOY_IMAGE_NAME="${PRODUCT_NAME}${DEPLOY_ENV_SUFFIX}"
String DEPLOY_IMAGE_TAG="build" + env.BUILD_NUMBER

int INVALID_IMAGE_NUMBER= env.BUILD_NUMBER.toInteger() - 3
String INVALID_IMAGE_NAME=DEPLOY_IMAGE_NAME + ':build' + INVALID_IMAGE_NUMBER

//################# CI PART ###################################

    stage('Setup Environment') {
        echo 'CONTAINER_NAME: ' + CONTAINER_NAME
        echo 'BUILT_IMAGE_NAME: ' + BUILT_IMAGE_NAME
        
        echo 'DEPLOY_IMAGE_NAME: ' + DEPLOY_IMAGE_NAME
        echo "DEPLOY_IMAGE_TAG: " + DEPLOY_IMAGE_TAG
        echo 'INVALID_IMAGE_NAME: ' + INVALID_IMAGE_NAME
        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: GIT_CRED, url: GIT_URL]]])
    }
    stage('Build Image and Publish') {
        sh 'chmod +x gradlew'
		
	//	sh 'kubectl version'
        sh "./gradlew clean build"
	//	def customImage = docker.build(BUILT_IMAGE_NAME)  
	//	sh "docker build -t ${BUILT_IMAGE_NAME}:${BUILT_IMAGE_TAG} ."
	//	sh "docker images"
    }

    //################# CD PART ###################################

    stage("Tag Image for Test"){
        echo "Tag image and push"
    }      

    stage("Deploy to Env ${DEPLOY_ENV_SUFFIX}"){
       echo "Deploy"
    }           
}
